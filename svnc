#!/usr/bin/env python
#
#	  Copyright (c) 2009 David Sveningsson <ext@sidvind.com>
#
#	  This program is free software: you can redistribute it and/or modify
#	  it under the terms of the GNU General Public License as published by
#	  the Free Software Foundation, either version 3 of the License, or
#	  (at your option) any later version.
#
#	  This program is distributed in the hope that it will be useful,
#	  but WITHOUT ANY WARRANTY; without even the implied warranty of
#	  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	  GNU General Public License for more details.
#
#	  You should have received a copy of the GNU General Public License
#	  along with this program.	 If not, see <http://www.gnu.org/licenses/>.
#

import sys
import select
import socket
import platform
import difflib
import os

if platform.system() == 'Windows':
	import msvcrt
	import ctypes
	import win32pipe

from subprocess import *

if platform.system() == 'Windows':
	Red = 4
	Yellow = 14
	Green = 2|8
	Blue = 1|8
	White = 15
	Reset = 0
else:
	Red = "\033[00;31m"
	Yellow = "\033[00;33m"
	Green = "\033[01;32m"
	Blue = "\033[01;34m"
	White = "\033[01;37m"
	Reset = "\033[0m"

color_table = { 
		  'C': Red,
		  'G': Yellow,
		  'M': White,
		  'A': Green,
		  'D': Blue,
		'+': Green,
		'-': Red
}

def set_color(color, target):
	 if platform.system() == 'Windows':
		 handle = msvcrt.get_osfhandle(target.fileno())
		 if color == None:
			 ctypes.windll.kernel32.SetConsoleTextAttribute(handle, 7)
			 return
		 
		 ctypes.windll.kernel32.SetConsoleTextAttribute(handle, color)
	 else:
		  if color == None:
					 target.write(Reset)
					 return

		  target.write(color)
		  
def data_in_pipe(pipe):
	 if platform.system() == 'Windows':
				try:
						 handle = msvcrt.get_osfhandle(pipe.fileno())
						 data, avail, _ = win32pipe.PeekNamedPipe(handle, 0)
						 return avail > 0
				except:
						 return False
	 else:
				a,b,c = select.select([pipe], [], [], 0)
				return len(a) > 0

class Connector:
		  def __init__(self, inp, out, diff_stats = False):
					 self.inp = inp
					 self.out = out
					 self.diff_stats = diff_stats
					 self.diff_add = -1
					 self.diff_del = -1
					 self.diff_total_add = 0
					 self.diff_total_del = 0
					 self.diff_files = 0
					 self.content = ""

		  def read(self):
					 char = self.inp.read(1)

					 if len(char) == 0:
								return True

					 self.content += char

					 if char[0] == "\n":
								self.output()
								self.content = ""
								return False

		  def print_diff_stats(self, last = False):
			  if self.diff_add == -1 and self.diff_del == -1:
				  return

			  print
			  print 'Stats: '
			  print '', self.diff_add, ' additions '
			  print '', self.diff_del, ' removals'

			  if not last:
				  print '==================================================================='

			  self.diff_total_add += self.diff_add
			  self.diff_total_del += self.diff_del
			  self.diff_add = -1
			  self.diff_del = -1
			  self.diff_files += 1

		  def print_diff_stats_total(self):
			  if self.diff_files <= 1:
				  return

			  print
			  print 'Summary: '
			  print '', self.diff_total_add, ' additions '
			  print '', self.diff_total_del, ' removals'

		  def output(self):
					 color = None
					 line = self.content
		  
					 if self.diff_stats:
						 if line[:5] == 'Index':
							 self.print_diff_stats()

					 stripped = line.strip()
					 n = len(stripped)

					 is_diff_char = ( n > 0 and ( line[0] == '+' or line[0] == '-' ) )
					 is_svn_char = ( n > 1 and stripped[1].isspace() )

					 if diff_stats and is_diff_char:
						 if line[0] == '+': self.diff_add += 1
						 if line[0] == '-': self.diff_del += 1

					 if is_diff_char or is_svn_char:
								try:
										  color = color_table[ stripped[0] ]
								except:
										  pass

					 try:
								if color:
										  set_color(color, self.out)
										  self.out.write(line[:-1])
										  set_color(None, self.out)
										  self.out.write("\n")
								else:
										  self.out.write(line)
					 except:
								set_color(None, self.out)

import base

if __name__ == '__main__':
	if os.path.basename(sys.argv[0]) == 'svn2' and len(sys.argv) > 1:
		svn = base.factory(sys.argv[1:])
		if svn:
			svn.execute()
	else:
		
		cmd = ['svn']
		cmd += sys.argv[1:]
		
		if cmd[1] == 'ci' or cmd[1] == 'commit':
			ret = raw_input('Are you sure you want to commit? [y/N] ')
			if not ( ret == 'y' or ret == 'Y' ):
				sys.exit(1)
		
		if cmd[1] == 'sw' or cmd[1] == 'switch':
			# This fails most of the time, for instance if an argument is passed...
			head, tail1 = os.path.split(cmd[2])
			head, tail2 = os.path.split(tail1)
			if not( tail1 == 'trunk' ) and ( tail2 in ['branches', 'tags'] ): 
				ret = raw_input('The url doesn\'t seem to be a trunk, branch or tag. Are you sure you want to switch to this url? [y/N] ')
				if not ( ret == 'y' or ret == 'Y' ):
					sys.exit(1)
		
		diff_stats = cmd[1] == 'di' or cmd[1] == 'diff'
		
		try:
			process = Popen(cmd, stdout=PIPE, stderr=PIPE)
		except OSError, e:
			 print e
			 print cmd
			 sys.exit(1)
		
		stdout = Connector(process.stdout, sys.stdout, diff_stats)
		stderr = Connector(process.stderr, sys.stderr)
		
		while True:
			ret = process.poll()
			
			while data_in_pipe(process.stdout):
				stdout_eof = stdout.read()
				if stdout_eof:
					  break
				
			while data_in_pipe(process.stderr):
				stderr_eof = stderr.read()
				if stderr_eof:
					  break
			
			if ret != None and stdout_eof and stderr_eof:
				break
		
		if ret < 0:
			 print 'Terminated with code: %d' % (-ret)
			 sys.exit(-ret)
		else:
			if diff_stats:
				stdout.print_diff_stats(True)
				stdout.print_diff_stats_total()
				sys.exit(ret)

